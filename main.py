import os
import base64
import json
import gspread
import telebot
import threading
from flask import Flask
from datetime import datetime
from openai import OpenAI
from oauth2client.service_account import ServiceAccountCredentials

print("=== –ó–∞–ø—É—Å–∫ main.py ===")

try:
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    GOOGLE_CREDS_B64 = os.getenv("GOOGLE_CREDS_B64")
    SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

    print("BOT_TOKEN:", "‚úÖ" if BOT_TOKEN else "‚ùå")
    print("OPENAI_API_KEY:", "‚úÖ" if OPENAI_API_KEY else "‚ùå")
    print("GOOGLE_CREDS_B64 –ø–æ–ª—É—á–µ–Ω–æ:", "‚úÖ" if GOOGLE_CREDS_B64 else "‚ùå")
    print("SPREADSHEET_ID:", SPREADSHEET_ID or "‚ùå")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
    bot = telebot.TeleBot(BOT_TOKEN)
    print("‚úÖ Telegram bot initialized")

    # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Google credentials –≤ —Ñ–∞–π–ª
    with open("creds.json", "w") as f:
        decoded = base64.b64decode(GOOGLE_CREDS_B64).decode("utf-8")
        f.write(decoded)
    print("‚úÖ Google credentials decoded and saved")

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
    client_gs = gspread.authorize(creds)
    spreadsheet = client_gs.open_by_key(SPREADSHEET_ID)
    print("‚úÖ Connected to Google Sheets")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI
    openai_client = OpenAI(api_key=OPENAI_API_KEY)
    print("‚úÖ OpenAI client initialized")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @bot.message_handler(func=lambda message: True)
    def handle_text(message):
        text = message.text.strip()
        print(f"üì© –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

        try:
            response = openai_client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º –∏ –¥–µ–¥–ª–∞–π–Ω–∞–º, —Ä–∞–±–æ—Ç–∞–µ—à—å —Å Google –¢–∞–±–ª–∏—Ü–µ–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—à—å –º—ã—Å–ª–∏ –∏ –∑–∞–¥–∞—á–∏."},
                    {"role": "user", "content": text}
                ]
            )
            gpt_response = response.choices[0].message.content.strip()
        except Exception as e:
            gpt_response = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}"
            print(gpt_response)

        bot.send_message(message.chat.id, gpt_response)

    # –§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    threading.Thread(target=lambda: bot.polling(none_stop=True)).start()
    print("‚úÖ Bot polling –∑–∞–ø—É—â–µ–Ω")

    # Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (–µ—Å–ª–∏ Web Service)
    app = Flask(__name__)

    @app.route('/')
    def index():
        return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."

    if __name__ == "__main__":
        port = int(os.environ.get("PORT", 10000))
        print(f"üåê Flask-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        app.run(host="0.0.0.0", port=port)

except Exception as e:
    import traceback
    print("üî• FATAL ERROR:", e)
    traceback.print_exc()
