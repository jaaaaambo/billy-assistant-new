import telebot
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
API_TOKEN = '–¢–í–û–ô_–¢–û–ö–ï–ù_–ë–û–¢–ê'
GOOGLE_SHEET_NAME = 'billy-assistant'

bot = telebot.TeleBot(API_TOKEN)
user_states = {}
pending_data = {}

# --- Google Sheets ---
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("billy-assistant.json", scope)
client = gspread.authorize(creds)
sheet = client.open(GOOGLE_SHEET_NAME)
sheet_tasks = sheet.worksheet("–ó–∞–¥–∞—á–∏")
sheet_thoughts = sheet.worksheet("–ú—ã—Å–ª–∏")

# --- –ö–æ–º–∞–Ω–¥—ã ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ë–∏–ª–ª–∏ –ú–∏–ª–ª–∏–≥–∞–Ω ü§ñ\n\n–ù–∞–ø–∏—à–∏ –º–Ω–µ –º—ã—Å–ª—å –∏–ª–∏ –∑–∞–¥–∞—á—É ‚Äî –∏ —è –ø–æ–º–æ–≥—É —Å —ç—Ç–∏–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è!")

@bot.message_handler(commands=['summary'])
def send_summary(message):
    rows = sheet_tasks.get_all_values()[1:]
    if not rows:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return
    text = "\n".join([f"{i+1}. {row[0]} ‚Äî –¥–æ {row[2]} ({row[3]})" for i, row in enumerate(rows)])
    bot.send_message(message.chat.id, f"üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n{text}")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ ---
@bot.message_handler(func=lambda message: True)
def handle_input(message):
    user_id = message.from_user.id
    user_states[user_id] = 'awaiting_type'
    pending_data[user_id] = {'description': message.text}
    bot.send_message(user_id, "–≠—Ç–æ –∑–∞–¥–∞—á–∞ –∏–ª–∏ –º—ã—Å–ª—å? –ù–∞–ø–∏—à–∏ `–∑–∞–¥–∞—á–∞` –∏–ª–∏ `–º—ã—Å–ª—å`.")

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞ ---
@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'awaiting_type')
def handle_type(message):
    user_id = message.from_user.id
    msg_type = message.text.strip().lower()
    
    if msg_type not in ['–∑–∞–¥–∞—á–∞', '–º—ã—Å–ª—å']:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ `–∑–∞–¥–∞—á–∞` –∏–ª–∏ `–º—ã—Å–ª—å`.")
        return

    pending_data[user_id]['type'] = msg_type
    if msg_type == '–º—ã—Å–ª—å':
        save_thought(user_id)
    else:
        user_states[user_id] = 'awaiting_deadline'
        bot.send_message(user_id, "–ö–æ–≥–¥–∞ –¥–µ–¥–ª–∞–π–Ω? –ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–î–î.–ú–ú.–ì–ì` –∏–ª–∏ `–Ω–µ—Ç –¥–µ–¥–ª–∞–π–Ω–∞`.")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'awaiting_deadline')
def handle_deadline(message):
    user_id = message.from_user.id
    text = message.text.strip().lower()

    if text == '–Ω–µ—Ç –¥–µ–¥–ª–∞–π–Ω–∞':
        deadline = ''
        days_left = ''
    else:
        try:
            deadline_date = datetime.strptime(text, "%d.%m.%y").date()
            deadline = deadline_date.strftime("%d.%m.%Y")
            days_left = (deadline_date - datetime.today().date()).days
        except ValueError:
            bot.send_message(user_id, "–ù–µ –ø–æ–Ω—è–ª —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π `31.08.25` –∏–ª–∏ `–Ω–µ—Ç –¥–µ–¥–ª–∞–π–Ω–∞`.")
            return

    pending_data[user_id]['deadline'] = deadline
    pending_data[user_id]['days_left'] = days_left
    user_states[user_id] = 'awaiting_status'
    bot.send_message(user_id, "–ö–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏? –ù–∞–ø—Ä–∏–º–µ—Ä: `–≤ —Ä–∞–±–æ—Ç–µ`, `–æ–∂–∏–¥–∞–µ—Ç`, `–≤ –ø–ª–∞–Ω–∞—Ö`.")

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == 'awaiting_status')
def handle_status(message):
    user_id = message.from_user.id
    pending_data[user_id]['status'] = message.text.strip()
    save_task(user_id)

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
def save_task(user_id):
    data = pending_data.pop(user_id)
    user_states.pop(user_id)
    row = [
        data['description'],
        data['type'],
        data['deadline'],
        data['status'],
        str(data['days_left']),
        datetime.now().strftime("%d.%m.%Y")
    ]
    sheet_tasks.append_row(row)
    bot.send_message(user_id, "‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É!")

def save_thought(user_id):
    data = pending_data.pop(user_id)
    user_states.pop(user_id)
    row = [data['description'], datetime.now().strftime("%d.%m.%Y")]
    sheet_thoughts.append_row(row)
    bot.send_message(user_id, "üí≠ –ú—ã—Å–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

# --- –ó–∞–ø—É—Å–∫ ---
bot.polling(none_stop=True)
