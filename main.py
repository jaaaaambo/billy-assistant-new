import os
import base64
import json
import gspread
import telebot
import threading
from flask import Flask
from datetime import datetime
from openai import OpenAI
from oauth2client.service_account import ServiceAccountCredentials

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_CREDS_B64 = os.getenv("GOOGLE_CREDS_B64")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ Google credentials
with open("creds.json", "w") as f:
    f.write(base64.b64decode(GOOGLE_CREDS_B64).decode("utf-8"))

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
gs_client = gspread.authorize(creds)
spreadsheet = gs_client.open_by_key(SPREADSHEET_ID)
sheet = spreadsheet.sheet1  # –ø–µ—Ä–≤–∞—è –≤–∫–ª–∞–¥–∫–∞

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
def add_task_to_sheet(text):
    today = datetime.today().strftime("%Y-%m-%d")
    row = [text, "üü° –í —Ä–∞–±–æ—Ç–µ", today, ""]
    sheet.append_row(row)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    text = message.text.strip()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ OpenAI
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º. –û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–¥–∞—á–µ–π. –ï—Å–ª–∏ –¥–∞ ‚Äî –¥–æ–±–∞–≤—å –≤ —Ç–∞–±–ª–∏—Ü—É."},
                {"role": "user", "content": text}
            ]
        )
        gpt_response = response.choices[0].message.content.strip()
    except Exception as e:
        gpt_response = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}"
        bot.send_message(message.chat.id, gpt_response)
        return

    # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–Ω—è—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É
    if "–¥–æ–±–∞–≤—å –≤ —Ç–∞–±–ª–∏—Ü—É" in gpt_response.lower() or "—è –¥–æ–±–∞–≤–∏–ª" in gpt_response.lower():
        try:
            add_task_to_sheet(text)
            gpt_response += "\n‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É."
        except Exception as e:
            gpt_response += f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É: {e}"

    bot.send_message(message.chat.id, gpt_response)

# Flask –¥–ª—è Render (Web Service)
app = Flask(__name__)

@app.route("/")
def index():
    return "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("=== –ó–∞–ø—É—Å–∫ main.py ===")
    print("BOT_TOKEN:", "‚úÖ" if BOT_TOKEN else "‚ùå")
    print("OPENAI_API_KEY:", "‚úÖ" if OPENAI_API_KEY else "‚ùå")
    print("GOOGLE_CREDS_B64 –ø–æ–ª—É—á–µ–Ω–æ:", "‚úÖ" if GOOGLE_CREDS_B64 else "‚ùå")
    print("SPREADSHEET_ID:", SPREADSHEET_ID)

    threading.Thread(target=lambda: bot.polling(none_stop=True)).start()
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
