import logging
from aiogram import Bot, Dispatcher, executor, types

API_TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
tasks = []

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ë–∏–ª–ª–∏ –ú–∏–ª–ª–∏–≥–∞–Ω ü§ñ
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–∞–¥–∞—á—É, –∏ —è –µ—ë —Å–æ—Ö—Ä–∞–Ω—é.
–ö–æ–º–∞–Ω–¥–∞ /summary –ø–æ–∫–∞–∂–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.")

@dp.message_handler(commands=['summary'])
async def send_summary(message: types.Message):
    if not tasks:
        await message.reply("–ü–æ–∫–∞ –∑–∞–¥–∞—á –Ω–µ—Ç. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å.")
    else:
        response = "\n".join([f"{i+1}. {task}" for i, task in enumerate(tasks)])
        await message.reply(f"üìù –í–æ—Ç —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n{response}")

@dp.message_handler(commands=['clear'])
async def clear_tasks(message: types.Message):
    tasks.clear()
    await message.reply("–í—Å–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã.")

@dp.message_handler()
async def handle_task(message: types.Message):
    tasks.append(message.text)
    await message.reply("–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)