import os
import base64
import json
import gspread
import telebot
import threading
from flask import Flask
from datetime import datetime
from openai import OpenAI
from oauth2client.service_account import ServiceAccountCredentials

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_CREDS_B64 = os.getenv("GOOGLE_CREDS_B64")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞
print("=== –ó–∞–ø—É—Å–∫ main.py ===")
print(f"BOT_TOKEN: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
print(f"OPENAI_API_KEY: {'‚úÖ' if OPENAI_API_KEY else '‚ùå'}")
print(f"GOOGLE_CREDS_B64 –ø–æ–ª—É—á–µ–Ω–æ: {'‚úÖ' if GOOGLE_CREDS_B64 else '‚ùå'}")
print(f"SPREADSHEET_ID: {SPREADSHEET_ID}")

# Telegram-–±–æ—Ç
bot = telebot.TeleBot(BOT_TOKEN)
print("‚úÖ Telegram bot initialized")

# –î–µ–∫–æ–¥–∏—Ä—É–µ–º Google credentials
with open("creds.json", "w") as f:
    f.write(base64.b64decode(GOOGLE_CREDS_B64).decode("utf-8"))
print("‚úÖ Google credentials decoded and saved")

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client_gs = gspread.authorize(creds)
spreadsheet = client_gs.open_by_key(SPREADSHEET_ID)
print("‚úÖ Connected to Google Sheets")

# OpenAI
openai_client = OpenAI(api_key=OPENAI_API_KEY)
print("‚úÖ OpenAI key set")


def calculate_days_left(deadline_str: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)"""
    deadline = datetime.strptime(deadline_str, "%d.%m.%Y").date()
    today = datetime.today().date()
    delta = (deadline - today).days
    return delta


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    text = message.text.strip()

    if "–¥–µ–¥–ª–∞–π–Ω" in text and any(char.isdigit() for char in text):
        try:
            # –ü—Ä–∏–º–µ—Ä: "—Å–¥–µ–ª–∞—Ç—å –∑–∞–¥–∞—á—É –¥–µ–¥–ª–∞–π–Ω 12.08.2025"
            parts = text.split("–¥–µ–¥–ª–∞–π–Ω")
            task_text = parts[0].strip()
            deadline_str = parts[1].strip().split()[0]
            days_left = calculate_days_left(deadline_str)

            sheet = spreadsheet.worksheet("–ó–∞–¥–∞—á–∏")
            sheet.append_row([task_text, deadline_str, "–ù–µ –Ω–∞—á–∞—Ç–æ", days_left])
            bot.send_message(message.chat.id, f"üìù –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ¬´{task_text}¬ª –¥–æ {deadline_str} ({days_left} –¥–Ω.)")
            return
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É. –û—à–∏–±–∫–∞: {e}")
            return

    try:
        response = openai_client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–¥–∞—á–∞–º –∏ –¥–µ–¥–ª–∞–π–Ω–∞–º, —Ä–∞–±–æ—Ç–∞–µ—à—å —Å Google –¢–∞–±–ª–∏—Ü–µ–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—à—å –º—ã—Å–ª–∏ –∏ –∑–∞–¥–∞—á–∏."},
                {"role": "user", "content": text}
            ]
        )
        reply = response.choices[0].message.content.strip()
        bot.send_message(message.chat.id, reply)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")


# –ë–æ—Ç –≤ —Ñ–æ–Ω–µ
threading.Thread(target=lambda: bot.polling(none_stop=True)).start()

# Flask-—Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)

@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
